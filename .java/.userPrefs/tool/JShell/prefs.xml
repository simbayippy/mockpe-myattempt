<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE map SYSTEM "http://java.sun.com/dtd/preferences.dtd">
<map MAP_XML_VERSION="1.0">
  <entry key="HISTORY_LINE_0" value="/exit"/>
  <entry key="REPLAY_RESTORE" value="interface Action {&#10;  String doAction();  &#10;}␞class Entering implements Action {&#10;  private Gym g;&#10;  private Personable p;&#10;&#10;  public Entering(Gym g, Personable p) {&#10;    this.g = g;&#10;    this.p = p;&#10;  }&#10;  &#10;  @Override&#10;  public String doAction() {&#10;    if (this.g.isFull()) {&#10;      return &quot;Customer: &quot; + this.p + &quot; cannot enter&quot;;&#10;    }&#10;    this.g.incrementCapacity();&#10;    return &quot;Customer: &quot; + this.p + &quot; can enter&quot;;&#10;  }&#10;  &#10;  @Override&#10;  public String toString() {&#10;    return &quot;Gym Capacity: &quot; + g.currCapacity() + &quot;/&quot; + g.capacity();&#10;  }&#10;}␞class Finish implements Action {&#10;  private Gym g;&#10;  private Trainer t;&#10;&#10;  public Finish(Gym g, Trainer t) {&#10;    this.g = g;&#10;    this.t = t;&#10;  }&#10;&#10;  @Override&#10;  public String doAction() {&#10;    if (!t.isTraining()) {&#10;      String str = &quot;&quot;;&#10;      str = String.format(&quot;Trainer: %s is not training&quot;, this.t);&#10;      return str;&#10;    }&#10;    t.setTraining();&#10;    t.equiptmentUsed().setTraining();&#10;    t.customerTrained(null);&#10;    t.setEquiptmentUsed(null);&#10;    String str = &quot;&quot;;&#10;    str = String.format(&quot;Trainer: %s has finished training&quot;, this.t);&#10;    return str;&#10;  }&#10;}␞class Gym {&#10;  private int capacity;&#10;  private int currCapacity = 0;&#10;  private GymEquipmentable[] gymEquipment;&#10;  private Personable[] people;&#10;&#10;  public Gym(int capacity, GymEquipmentable[] gymEquipment, Personable[] people) {&#10;    this.capacity = capacity;&#10;    this.gymEquipment = gymEquipment;&#10;    this.people = people;&#10;  }&#10;&#10;  public boolean isFull() {&#10;    if (currCapacity == capacity) {&#10;      return true;&#10;    }&#10;    return false;&#10;  }&#10;&#10;  public int capacity() {&#10;    return this.capacity;&#10;  }&#10;&#10;  public int currCapacity() {&#10;    return this.currCapacity;&#10;  }&#10;  &#10;  public void incrementCapacity() {&#10;    this.currCapacity++;&#10;  }&#10;}␞interface GymEquipmentable {&#10;  boolean inUse();&#10;  void setTraining();&#10;}␞import java.io.File;␞import java.io.FileNotFoundException;␞import java.util.Scanner;␞class GymManagement {&#10;&#10;  private static final int TREADMILL = 0;&#10;  private static final int DUMBBELL = 1;&#10;  private static final int TRAINER = 0;&#10;  private static final int CUSTOMER = 1;&#10;  private static final int ENTER = 0;&#10;  private static final int START = 1;&#10;  private static final int FINISH = 2;&#10;&#10;  private GymEquipmentable[] gymEquipment;&#10;  private Personable[] people;&#10;  private Gym gym;&#10;  private Action[] actions;&#10;&#10;  public void printEquipment() {&#10;    for (int i = 0; i &lt; gymEquipment.length; i++) {&#10;      System.out.println(gymEquipment[i]);&#10;    }&#10;  }&#10;&#10;  public void printPeople() {&#10;    for (int i = 0; i &lt; people.length; i++) {&#10;      System.out.println(people[i]);&#10;    }&#10;  }&#10;  &#10;  public GymManagement() {&#10;    Scanner scanner = new Scanner(System.in);&#10;&#10;    int numEquipment = scanner.nextInt();&#10;    gymEquipment = new GymEquipmentable[numEquipment];&#10;    for (int i = 0; i &lt; numEquipment; i++) {&#10;      int equipmentType = scanner.nextInt();&#10;      double details = scanner.nextDouble();&#10;      if (equipmentType == GymManagement.TREADMILL) {&#10;        gymEquipment[i] = new Treadmill(details);&#10;      } else if (equipmentType == GymManagement.DUMBBELL) {&#10;        gymEquipment[i] = new Dumbbell(details);&#10;      }&#10;    }&#10;&#10;    int numPeople = scanner.nextInt();&#10;    for (int i = 0; i &lt; numPeople; i++) {&#10;      int peopleKind = scanner.nextInt();&#10;      String currName = scanner.next();&#10;      if (peopleKind == 0) {&#10;        people[i] = new Trainer(currName); &#10;      } else {&#10;        people[i] = new Customer(currName);&#10;      }&#10;    }&#10;&#10;    int capacity = scanner.nextInt();&#10;    gym = new Gym(capacity, gymEquipment, people);&#10;    int numActions = scanner.nextInt();&#10;    &#10;    for (int i = 0; i &lt; numActions; i++) {&#10;      int action = scanner.nextInt();&#10;      if (action == 0) {&#10;        int customer = scanner.nextInt();&#10;        actions[i] = new Entering(gym, people[customer]);&#10;      } else if (action == 1) {&#10;        int trainer = scanner.nextInt();&#10;        Trainer t = (Trainer) people[trainer];&#10;        int customer = scanner.nextInt();&#10;        Customer c = (Customer) people[customer];&#10;        int equipment = scanner.nextInt();&#10;        GymEquipmentable e = gymEquipment[equipment];&#10;        actions[i] = new Training(gym, t, c, e);&#10;      } else {&#10;        int trainer = scanner.nextInt();&#10;        actions[i] = new Finish(gym, (Trainer) people[trainer]);&#10;      }&#10;    }&#10;&#10;    for (int i = 0; i &lt; actions.length; i++) {&#10;      actions[i].doAction();&#10;    }&#10;  }&#10;}␞interface Personable {&#10;  boolean isTraining();&#10;  void setTraining();&#10;}␞import java.io.FileNotFoundException;␞class Test1 {&#10;  public static void main(String[] args) {&#10;    GymManagement gym = new GymManagement();&#10;    gym.printEquipment();&#10;  }&#10;}␞import java.io.FileNotFoundException;␞class Test2 {&#10;  public static void main(String[] args) {&#10;    GymManagement gym = new GymManagement();&#10;    gym.printPeople();&#10;  }&#10;}␞import java.io.FileNotFoundException;␞class Test3 {&#10;  public static void main(String[] args) {&#10;    GymManagement gym = new GymManagement();&#10;  }&#10;}␞class Trainer implements Personable {&#10;  private String name;&#10;  private Customer customerTrained;&#10;  private GymEquipmentable equiptmentUsed;&#10;  private boolean isTraining = false;&#10;&#10;  public Trainer(String name) {&#10;    this.name = name;&#10;  }&#10; &#10;  public void customerTrained(Customer c) {&#10;    this.customerTrained = c;&#10;  }&#10;&#10;  public void setEquiptmentUsed(GymEquipmentable e) {&#10;    this.equiptmentUsed = e;&#10;  }&#10;&#10;  public GymEquipmentable equiptmentUsed() {&#10;    return this.equiptmentUsed;&#10;  }&#10;  &#10;  @Override&#10;  public boolean isTraining() {&#10;    return this.isTraining;&#10;  }&#10;  &#10;  @Override &#10;  public void setTraining() {&#10;    isTraining = !isTraining;&#10;  }&#10;  &#10;  @Override&#10;  public String toString() {&#10;    return this.name;&#10;  }&#10;}␞class Training implements Action {&#10;  private Gym g;&#10;  private Trainer p;&#10;  private Customer c;&#10;  private GymEquipmentable e;&#10;&#10;  public Training(Gym g, Trainer p, Customer c, GymEquipmentable e) {&#10;    this.g = g;&#10;    this.p = p;&#10;    this.c = c;&#10;    this.e = e;&#10;  }&#10;&#10;  @Override&#10;  public String doAction() {&#10;    this.g.incrementCapacity();&#10;    if (p.isTraining() || e.inUse()) {&#10;      return &quot;Cannot Train!&quot;;&#10;    }&#10;    this.p.setTraining();&#10;    this.c.setTraining();&#10;    this.e.setTraining();&#10;&#10;    this.p.customerTrained(c);&#10;    this.p.setEquiptmentUsed(this.e);&#10;&#10;    if (e instanceof Treadmill) {&#10;      Treadmill t = (Treadmill) this.e;&#10;      return t.toString();&#10;    } &#10;    Dumbbell d = (Dumbbell) this.e;&#10;    return d.toString();&#10;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    String str = &quot;&quot;;&#10;    str = String.format(&quot;Trainer: %s training Customer: %s&quot;, this.p, this.c);&#10;    return str;&#10;  }&#10;}␞class Treadmill implements GymEquipmentable {&#10;  private boolean inUse = false;&#10;  private String name = &quot;Treadmill&quot;;&#10;  private double details;&#10;&#10;  public Treadmill(double details) {&#10;    this.details = details;&#10;  }&#10;  &#10;  @Override&#10;  public boolean inUse() {&#10;    return this.inUse;&#10;  }&#10;&#10;  @Override &#10;  public void setTraining() {&#10;    this.inUse = !this.inUse;&#10;  }&#10;  &#10;  @Override&#10;  public String toString() {&#10;    String str = &quot;&quot;;&#10;    str = String.format(&quot;Equipment: Treadmill at speed %d&quot;, this.details);&#10;    return str;&#10;  }&#10;}"/>
</map>
